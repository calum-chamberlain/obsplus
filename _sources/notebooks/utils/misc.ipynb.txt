{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Miscellaneous Utilities\n",
    "The follow demonstrates some Miscellaneous utilities included in obsplus.\n",
    "\n",
    "## Distance DataFrame\n",
    "Often it is necessary to calculate geometric parameters (distance, azimuth, etc.) for pairs of entities in two different groups. For example, distance from each event in a catalog to each receiver in an inventory, which allows for quick look-ups for desired pairs, as well as easily calculating statistics . "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/isti_ew/anaconda3/lib/python3.7/site-packages/dask/config.py:168: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.\n",
      "  data = yaml.load(f.read()) or {}\n",
      "/home/isti_ew/anaconda3/lib/python3.7/site-packages/distributed/config.py:20: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.\n",
      "  defaults = yaml.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load the catalog and inventory from the crandall dataset\n",
    "import obsplus\n",
    "\n",
    "crandall = obsplus.load_dataset('crandall')\n",
    "cat = crandall.event_client.get_events()\n",
    "inv = crandall.station_client.get_stations()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>horizontal_distance</th>\n",
       "      <th>depth_distance</th>\n",
       "      <th>azimuth</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id1</th>\n",
       "      <th>id2</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">smi:local/248883</th>\n",
       "      <th>UU.MPU..HHE</th>\n",
       "      <td>70954.138005</td>\n",
       "      <td>70692.388410</td>\n",
       "      <td>6089.0</td>\n",
       "      <td>150.031063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TA.P18A..BHZ</th>\n",
       "      <td>86251.208485</td>\n",
       "      <td>85972.920365</td>\n",
       "      <td>6923.0</td>\n",
       "      <td>258.031261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UU.TMU..HHN</th>\n",
       "      <td>19796.923099</td>\n",
       "      <td>18551.448547</td>\n",
       "      <td>6911.0</td>\n",
       "      <td>356.054669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TA.Q15A..BHZ</th>\n",
       "      <td>112471.256622</td>\n",
       "      <td>112328.900632</td>\n",
       "      <td>5657.0</td>\n",
       "      <td>62.358311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UU.SRU..HHE</th>\n",
       "      <td>72144.667597</td>\n",
       "      <td>71896.069480</td>\n",
       "      <td>5984.0</td>\n",
       "      <td>303.185917</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    distance  horizontal_distance  \\\n",
       "id1              id2                                                \n",
       "smi:local/248883 UU.MPU..HHE    70954.138005         70692.388410   \n",
       "                 TA.P18A..BHZ   86251.208485         85972.920365   \n",
       "                 UU.TMU..HHN    19796.923099         18551.448547   \n",
       "                 TA.Q15A..BHZ  112471.256622        112328.900632   \n",
       "                 UU.SRU..HHE    72144.667597         71896.069480   \n",
       "\n",
       "                               depth_distance     azimuth  \n",
       "id1              id2                                       \n",
       "smi:local/248883 UU.MPU..HHE           6089.0  150.031063  \n",
       "                 TA.P18A..BHZ          6923.0  258.031261  \n",
       "                 UU.TMU..HHN           6911.0  356.054669  \n",
       "                 TA.Q15A..BHZ          5657.0   62.358311  \n",
       "                 UU.SRU..HHE           5984.0  303.185917  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create distance dataframe\n",
    "df = obsplus.utils.get_distance_df(entity_1=cat, entity_2=inv)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since a multi-index is used it provides a fairly intuitive way to look up particular event-channel pairs using a tuple of (event_id, seed_id) in conjunction with the `.loc` DataFrame attribute like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "distance               70954.138005\n",
      "horizontal_distance    70692.388410\n",
      "depth_distance          6089.000000\n",
      "azimuth                  150.031063\n",
      "Name: (smi:local/248883, UU.MPU..HHZ), dtype: float64\n"
     ]
    }
   ],
   "source": [
    "event_id = str(cat[0].resource_id)\n",
    "seed_id = 'UU.MPU..HHZ'\n",
    "\n",
    "print(df.loc[(event_id, seed_id)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "150.031062577\n"
     ]
    }
   ],
   "source": [
    "# or just get a particular parameter\n",
    "print(df.loc[(event_id, seed_id), 'azimuth'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>horizontal_distance</th>\n",
       "      <th>depth_distance</th>\n",
       "      <th>azimuth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>408.00</td>\n",
       "      <td>408.00</td>\n",
       "      <td>408.00</td>\n",
       "      <td>408.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>91.47</td>\n",
       "      <td>91.24</td>\n",
       "      <td>5.22</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>36.39</td>\n",
       "      <td>36.55</td>\n",
       "      <td>1.85</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.88</td>\n",
       "      <td>18.26</td>\n",
       "      <td>1.70</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>70.58</td>\n",
       "      <td>70.46</td>\n",
       "      <td>3.69</td>\n",
       "      <td>0.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>90.90</td>\n",
       "      <td>90.85</td>\n",
       "      <td>5.50</td>\n",
       "      <td>0.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>124.38</td>\n",
       "      <td>124.36</td>\n",
       "      <td>6.25</td>\n",
       "      <td>0.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>144.12</td>\n",
       "      <td>144.00</td>\n",
       "      <td>9.31</td>\n",
       "      <td>0.36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       distance  horizontal_distance  depth_distance  azimuth\n",
       "count    408.00               408.00          408.00   408.00\n",
       "mean      91.47                91.24            5.22     0.20\n",
       "std       36.39                36.55            1.85     0.10\n",
       "min       18.88                18.26            1.70     0.01\n",
       "25%       70.58                70.46            3.69     0.13\n",
       "50%       90.90                90.85            5.50     0.16\n",
       "75%      124.38               124.36            6.25     0.29\n",
       "max      144.12               144.00            9.31     0.36"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert m to km\n",
    "df_km = df / 1000.\n",
    "# Calculate stats for source reseiver distances\n",
    "df_km.describe().round(decimals=2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
